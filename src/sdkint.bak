
    MobroSDK.init().then(() => {

        const mobro_settings =  MobroSDK.helper.settings

        //could do that better some max vals could be wrong - please fix
        settings.min = mobro_settings.hardware.temperature[0].max
        settings.red = mobro_settings.hardware.temperature[0].critical
        settings.orange = mobro_settings.hardware.temperature[0].warning


        charts = initCharts();

        MobroSDK.addChannelListener('general_processor_temperature', (data) => {
            charts.cpuTemp.chart.data.datasets[0].data[0] = parseFloat(data.payload.value);
            charts.cpuTemp.chart.data.datasets[0].data[1] =  parseFloat(data.payload.value - settings.max);
            charts.cpuTemp.chart.update();
        });
        const cpuLoad = document.getElementById('cpu-current-load')
        MobroSDK.addChannelListener('general_processor_usage', (data) => {
            charts.cpuLoad.chart.data.datasets[0].data.push(parseInt(data.payload.value))
            charts.cpuLoad.chart.data.datasets[0].data.shift();

            cpuLoad.innerHTML = parseInt(data.payload.value);

            charts.cpuLoad.chart.config.data.labels.push(+ new Date())
            charts.cpuLoad.chart.config.data.labels.shift();

            charts.cpuLoad.chart.update();
        })



        MobroSDK.addChannelListener('general_graphics_temperature', (data) => {
            charts.gpuTemp.chart.data.datasets[0].data[0] = parseFloat(data.payload.value)
            charts.gpuTemp.chart.data.datasets[0].data[1] =  parseFloat(data.payload.value - settings.max)

            charts.gpuTemp.chart.update();
        })

        const gpuLoad = document.getElementById('gpu-current-load')
        MobroSDK.addChannelListener('general_graphics_usage', (data) => {
            charts.gpuLoad.chart.data.datasets[0].data.push(parseInt(data.payload.value))
            charts.gpuLoad.chart.data.datasets[0].data.shift();

            gpuLoad.innerHTML = parseInt(data.payload.value);

            charts.gpuLoad.chart.config.data.labels.push(+ new Date())
            charts.gpuLoad.chart.config.data.labels.shift();

            charts.gpuLoad.chart.update()
        })



        MobroSDK.addChannelListener('general_memory_usage', (data) => {
            charts.ramUsage.chart.data.datasets[0].data[0] = parseFloat(data.payload.value)
            charts.ramUsage.chart.data.datasets[0].data[1] =  parseFloat(100 - data.payload.value)

            charts.ramUsage.chart.update()
        })

        const memoryData = document.getElementById('mobro-ram-data--used')
        MobroSDK.addChannelListener('general_memory_used', (data) => {
            memoryData.innerHTML = convert(parseFloat(data.payload.value)).from(data.payload.unit).to('GB').toFixed(2);
        })


        MobroSDK.emit("monitor:hardware").then((data) => {
            document.getElementById("mobro-cpu-name").innerHTML = data.processor.cpus[0].name
            document.getElementById("mobro-gpu-name").innerHTML = data.graphics.gpus[0].name
            document.getElementById("mobro-ram-data--total").innerHTML = bytes(data.memory.totalcapacity)
        })

        MobroSDK.emit("monitor:sensor:data", "general_processor_temperature").then((data) => {
            //could prefill line graphs later on...
        })

        MobroSDK.emit("monitor:sensor:data", "theme_vram_total").then((data) => {
            if(!data.value || !data.unit){
                return;
            }

            document.getElementById("mobro-vram-data-total").innerHTML =
                convert(data.value).from(data.unit).to('GB').toFixed(0) + 'GB'
        })

        const cpuFan = document.getElementById("fan_cpu-chart-doughnut")
        MobroSDK.addChannelListener("theme_fan_speed_cpu", (data) => {
            if(data.payload && data.payload.sensortype){
                if(!charts.cpuFan){
                    charts.cpuFan = createClosedDoughnuts(document.getElementById("fan_cpu-chart-doughnut"))
                    cpuFan.style.display = 'block';
                }
                charts.cpuFan.chart.data.datasets[0].data[0] = parseFloat(data.payload.value)
                charts.cpuFan.chart.data.datasets[0].data[1] = parseFloat(data.payload.avg - data.payload.value)

                charts.cpuFan.chart.update()
            }else{
                cpuFan.style.display = 'none';
            }
        })

        const gpuFan = document.getElementById("fan_gpu-chart-doughnut")
        MobroSDK.addChannelListener("theme_fan_speed_gpu", (data) => {
            if(data.payload){
                if(!charts.gpuFan){
                    charts.gpuFan = createClosedDoughnuts(document.getElementById("fan_gpu-chart-doughnut"))
                    gpuFan.style.display = 'block';
                }
                charts.gpuFan.chart.data.datasets[0].data[0] = parseFloat(data.payload.value)
                charts.gpuFan.chart.data.datasets[0].data[1] = parseFloat(data.payload.avg - data.payload.value)

                charts.gpuFan.chart.update()
            }else{
                gpuFan.style.display = 'none';
            }
        })

        const vramData = document.getElementById("mobro-vram-data")
        MobroSDK.addChannelListener("theme_vram", (data) => {
            if(data.payload){
                vramData.style.display = 'inline-block';
                vramData.innerHTML = convert(data.payload.value).from(data.payload.unit).to('GB').toFixed(2)
            }else{
                vram.vramData.display = 'none';
            }
        })

        const vram = document.getElementById("vram-chart-doughnut")
        MobroSDK.addChannelListener("theme_vram_percentage", (data) => {
            if(data.payload){
                if(!charts.vramUsage){
                    charts.vramUsage = createDoughnuts(document.getElementById("vram-chart-doughnut"))
                    vram.style.display = 'block';
                }
                charts.vramUsage.chart.data.datasets[0].data[0] = parseFloat(data.payload.value)
                charts.vramUsage.chart.data.datasets[0].data[1] = parseFloat(100 - data.payload.value)

                charts.vramUsage.chart.update()

                // vramData.innerHTML =
            }else{
                vram.style.display = 'none';
            }
        })

    })
})()